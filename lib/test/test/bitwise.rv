fn test() -> bool {
    let a = 1;
    let b = 2;
    // Bitwise and test
    if a & b != 0 {
        return false;
    }
    // Bitwise or test
    if a | b != 3 {
        return false;
    }
    // Bitwise xor test 1
    if a ^ b != 3 {
        return false;
    }

    a ^= 3;
    b |= 4;
    b &= 2;
    // Bitwise xor assignment
    if a != 2 {
        return false;
    }
    // Bitwise or and bitwise and assignments
    if b != 2 {
        return false;
    }
    // Bitwise xor test 2
    if a ^ b != 0 {
        return false;
    }

    // Bit invert test
    if (~a) != (~b) {
        return false;
    }

    // Bit invert test
    if ~a == b {
        return false;
    }

    // Bit shift test
    if a >> 2 << 2 != a {
        return false;
    }

    if a >> 3 << 3 != a {
        return false;
    }

    if a << 2 != 8 {
        return false;
    }

    if a >> 2 != 0 {
        return false;
    }

    if a << b != a << 4 >> 2 {
        return false;
    }

    return true;
}