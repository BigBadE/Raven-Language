import mem;
import math;

pub struct Pointer<T> {
    pub data: u64;
}

impl<T> Pointer<T> {
    pub fn alloc_empty(size: u64) -> Pointer<T> {
        return new Pointer<T> { 
            data: Pointer<T>::malloc_size(size),
        };
    }

    pub fn get_ptr(reading: T) -> Pointer<T> {
        return new Pointer<T> {
            data: Pointer::get_ptr_data(reading),
        };
    }

    internal fn malloc_size(size: u64) -> u64 {

    }

    internal fn get_ptr_data(reading: T) -> u64 {
        
    }

    pub fn read(self) -> T {
        return Pointer::read_ptr_data<T>(self.data);
    }

    pub fn write(self, data: T) {
        Pointer::write_ptr_data(self.data, data);
    }

    internal fn read_ptr_data(pointer: u64) -> T {
        
    }
    
    internal fn write_ptr_data(pointer: u64, data: T) {
        
    }

    internal fn get_size() -> u64 {

    }
}

impl<T> Add<u64, Pointer<T>> for Pointer<T> {
    fn add(self, other: u64) -> Pointer<T> {
        return new Pointer<T> {
            data: self.data + other,
        };
    }
}